{"version":3,"sources":["Components/Login/LoginForm.js","Components/Login/LoginContainer.js"],"names":["LoginForm","captchaImg","onSubmit","schema","yup","email","required","password","captcha","withMutation","default","initialValues","rememberMe","values","a","setStatus","validationSchema","handleSubmit","errors","isSubmitting","status","Form","noValidate","Group","as","Col","md","InputGroup","className","Prepend","Text","Control","Field","type","name","placeholder","isInvalid","Feedback","Check","label","Image","src","Badge","variant","message","Button","disabled","AC","postLoginData","connect","state","isAuth","getIsAuth","getCaptcha","props","to","style","padding"],"mappings":"4QAuFeA,EAjFG,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,SACtBC,EAASC,IAAW,CACtBC,MAAOD,MAAaC,QAAQC,SAAS,8BACrCC,SAAUH,MACLE,SAAS,gCACdE,QAASJ,MAAYK,cACjB,SAACN,GAAD,OAA2B,OAAfF,EACRE,EAAOG,SAAS,8BAAgCH,EAAOO,eAGnE,OACI,kBAAC,IAAD,CAAQC,cAAe,CAACC,YAAY,GAC5BV,SAAQ,uCAAE,WAAOW,EAAP,kBAAAC,EAAA,6DAAgBC,EAAhB,EAAgBA,UAAhB,kBAEIb,EAASW,GAFb,sDAIFE,EAAU,EAAD,IAJP,wDAAF,wDAQRC,iBAAkBb,IACrB,gBAAEc,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,OAAQC,EAAxB,EAAwBA,aAAcC,EAAtC,EAAsCA,OAAtC,OACG,kBAACC,EAAA,EAAD,CAAMC,YAAU,EAACpB,SAAUe,GACvB,kBAACI,EAAA,EAAKE,MAAN,CAAYC,GAAIC,IAAKC,GAAI,GACrB,kBAACC,EAAA,EAAD,CAAYC,UAAU,QAClB,kBAACD,EAAA,EAAWE,QAAZ,KACI,kBAACF,EAAA,EAAWG,KAAZ,gBAEJ,kBAACT,EAAA,EAAKU,QAAN,CAAcP,GAAIQ,IACJC,KAAK,OACLC,KAAK,QACLC,YAAa,qBACbC,YAAalB,EAAOb,QAElC,kBAACgB,EAAA,EAAKU,QAAQM,SAAd,CAAuBJ,KAAK,WACvBf,EAAOb,QAIhB,kBAACsB,EAAA,EAAD,CAAYC,UAAU,QAClB,kBAACD,EAAA,EAAWE,QAAZ,KACI,kBAACF,EAAA,EAAWG,KAAZ,oBAEJ,kBAACT,EAAA,EAAKU,QAAN,CAAcP,GAAIQ,IACJC,KAAM,WACNC,KAAM,WACNC,YAAa,uBACbC,UAAWlB,EAAOX,WAEhC,kBAACc,EAAA,EAAKU,QAAQM,SAAd,CAAuBJ,KAAK,WACvBf,EAAOX,WAGhB,kBAACc,EAAA,EAAKE,MAAN,CAAYK,UAAU,QAClB,kBAACP,EAAA,EAAKiB,MAAN,CAAYd,GAAIQ,IACJC,KAAM,WACNM,MAAO,cACPL,KAAM,gBAErBjC,GACD,kBAACoB,EAAA,EAAKE,MAAN,KACI,kBAACiB,EAAA,EAAD,CAAOC,IAAKxC,EAAY2B,UAAU,SAClC,kBAACP,EAAA,EAAKU,QAAN,CAAcP,GAAIQ,IACJG,YAAa,6BACbD,KAAM,UACNE,UAAWlB,EAAOV,UAEhC,kBAACa,EAAA,EAAKU,QAAQM,SAAd,CAAuBJ,KAAM,WACxBf,EAAOV,YAGbY,GAAU,4BAAI,kBAACsB,EAAA,EAAD,CAAOC,QAAQ,WAAWvB,EAAOwB,WAEtD,6BACI,kBAACC,EAAA,EAAD,CAAQZ,KAAK,SAASa,SAAU3B,GAAhC,gB,gBC1DpB4B,EAAK,CAACC,mBAGKC,uBAPO,SAACC,GAAD,MAAY,CAC1BC,OAAQC,YAAUF,GAClB1C,QAAS6C,YAAWH,MAKYH,EAAzBE,EAlBW,SAACK,GACnB,OAAIA,EAAMH,OACC,kBAAC,IAAD,CAAUI,GAAI,aAGrB,yBAAKC,MAAO,CAACC,QAAS,KAClB,sCACA,kBAAC,EAAD,CAAWvD,SAAUoD,EAAMN,cAAe/C,WAAYqD,EAAM9C","file":"static/js/8.9c55ae86.chunk.js","sourcesContent":["import React from 'react'\r\nimport s from '../Common/FormsControls/FormControls.module.css'\r\nimport {  Badge, Button, Col, Form, Image, InputGroup } from 'react-bootstrap'\r\nimport * as yup from 'yup'\r\nimport { Field, Formik } from 'formik'\r\n\r\nconst LoginForm = ({captchaImg, onSubmit}) => {\r\n    const schema = yup.object({\r\n        email: yup.string().email().required('E-mail is a required field'),\r\n        password: yup.string()\r\n            .required('Password is a required field'),\r\n        captcha: yup.mixed().withMutation(\r\n            (schema) => captchaImg !== null ?\r\n                schema.required('Enter symbols from captcha') : schema.default()\r\n        )\r\n    })\r\n    return (\r\n        <Formik initialValues={{rememberMe: false}}\r\n                onSubmit={async (values, {setStatus}) => {\r\n                    try {\r\n                        await onSubmit(values)\r\n                    } catch (error) {\r\n                        setStatus(error)\r\n                    }\r\n                }}\r\n\r\n                validationSchema={schema}>\r\n            {({handleSubmit, errors, isSubmitting, status}) => (\r\n                <Form noValidate onSubmit={handleSubmit}>\r\n                    <Form.Group as={Col} md={6}>\r\n                        <InputGroup className=\"mb-3\">\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text>E-mail</InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <Form.Control as={Field}\r\n                                          type=\"text\"\r\n                                          name=\"email\"\r\n                                          placeholder={'Enter you\\'r e-mail'}\r\n                                          isInvalid={!!errors.email}\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.email}\r\n                            </Form.Control.Feedback>\r\n                        </InputGroup>\r\n\r\n                        <InputGroup className=\"mb-3\">\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text> Password </InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <Form.Control as={Field}\r\n                                          type={'password'}\r\n                                          name={'password'}\r\n                                          placeholder={'Enter you\\'r password'}\r\n                                          isInvalid={errors.password}\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                {errors.password}\r\n                            </Form.Control.Feedback>\r\n                        </InputGroup>\r\n                        <Form.Group className=\"mb-3\">\r\n                            <Form.Check as={Field}\r\n                                        type={'checkbox'}\r\n                                        label={'Remember Me'}\r\n                                        name={'rememberMe'}/>\r\n                        </Form.Group>\r\n                        {captchaImg &&\r\n                        <Form.Group>\r\n                            <Image src={captchaImg} className=\"mb-3\"/>\r\n                            <Form.Control as={Field}\r\n                                          placeholder={'Enter symbols from captcha'}\r\n                                          name={'captcha'}\r\n                                          isInvalid={errors.captcha}\r\n                            />\r\n                            <Form.Control.Feedback type={'invalid'}>\r\n                                {errors.captcha}\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>}\r\n                        {!!status && <h4><Badge variant=\"warning\">{status.message}</Badge></h4>}\r\n                    </Form.Group>\r\n                    <div>\r\n                        <Button type=\"submit\" disabled={isSubmitting}>Log-in</Button>\r\n                    </div>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\nexport default LoginForm","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { postLoginData } from '../../Redux/authReducer'\r\nimport LoginForm from './LoginForm'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { getCaptcha, getIsAuth } from '../../Redux/authSelectors'\r\n\r\nconst    LoginContainer = (props) => {\r\n        if (props.isAuth) {\r\n            return <Redirect to={'/profile'}/>\r\n        }\r\n        return (\r\n            <div style={{padding: 10}}>\r\n                <h3>Log-in</h3>\r\n                <LoginForm onSubmit={props.postLoginData} captchaImg={props.captcha}/>\r\n            </div>\r\n        )\r\n    },\r\n    mapStateToProps = (state) => ({\r\n        isAuth: getIsAuth(state),\r\n        captcha: getCaptcha(state)\r\n    }),\r\n    AC = {postLoginData}\r\n\r\n\r\nexport default connect(mapStateToProps, AC)(LoginContainer)"],"sourceRoot":""}